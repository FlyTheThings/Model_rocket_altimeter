/*
 * FMC_Lite.c
 *
 * Created: 6.12.2013 22:49:38
 *  Author: Alvar
 */ 
#define ajastin 15  //aika, jonka jälkeen varmuuajastin avaa laskuvarjon, 1/16s tarkkuudella
#define muunnoskerroin 0.995 //kuinka monta metriä on 1 adc-bitti
#define punainen PIN6_bm
#define vihree PIN7_bm
#define sytytin PIN5_bm
#define pwm PIN4_bm
#define F_CPU 2000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>


void  init(void);
void  adc_init(void);
void  dac_init(void);
float adc (void);
void  korkeusmittari_init(void);
void  uart_init(void);
int   korkeus (void);
void  put_char (unsigned char merkki);
void  put_int (int luku);
void  put_merkkijono (unsigned char merkkijono[]);
void  pwm_init(void);
void  kello_init(void);
void  ledivilkku(char vilkku);
void  korkeusledi(int lakikorkeus, char vilkku);

int kalibrointiarvo = 0;

void init(void)
{
	PORTD_DIRSET   = pwm|sytytin|punainen|vihree;
	PORTD_OUT	   = punainen;
	PORTD_PIN2CTRL = PORT_OPC_PULLUP_gc;
	
	PMIC_CTRL |= PMIC_LOLVLEN_bm;
	CPU_SREG  |= CPU_I_bm;
	OSC_CTRL = OSC_RC32MEN_bm;
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
}

void adc_init(void)
{
	ADCA_CTRLA		 = ADC_ENABLE_bm;
	ADCA_CTRLB		 = ADC_CONMODE_bm|ADC_RESOLUTION_MT12BIT_gc;
	ADCA_REFCTRL	 = ADC_REFSEL_INT1V_gc|ADC_BANDGAP_bm;
	ADCA_PRESCALER	 = ADC_PRESCALER_DIV16_gc;
	ADCA_CH0_CTRL	 = ADC_CH_INPUTMODE_DIFFWGAINL_gc;
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc|ADC_CH_MUXNEGL_PIN1_gc;
	ADCA_CH0_INTCTRL = ADC_CH_INTLVL_MED_gc;	
	ADCA_CH0_AVGCTRL = ADC_CH_SAMPNUM3_bm;//adc:n tulos oversamplattu 256 kertaa ja right-shiftattu 4 bittiä, antaa 16-kertaisen tuloksen.
	
}

void dac_init(void)
{
	DACA_CTRLA = DAC_CH0EN_bm|DAC_ENABLE_bm;
	DACA_CTRLB = DAC_CHSEL_SINGLE_gc;
	DACA_CTRLC = DAC_REFSEL_AREFA_gc;

}

float adc (void)
{
	float adc_arvo = 0;
	
	ADCA_CTRLA |= ADC_START_bm;
	loop_until_bit_is_set(ADCA_INTFLAGS,ADC_CH0IF_bp);
	ADCA_INTFLAGS |= ADC_CH0IF_bm;
	
	adc_arvo = ADCA_CH0RES;//float; etumerkki, 11-bit kokonaislukuosa(2048) ja resoluutiona 1/16. 
	
	return adc_arvo/16;//Jaetaan 16_lla koska 256 samplea on ja right-shiftattu 4 bit.
}

void korkeusmittari_init(void)
{
	int kalibrointiarvo2 = 1;
	
	DACA_CH0DATA = 4095;
	DACA_CH0DATA -= adc()*0.8;// muunnetaan 1 ADC(0,000488281/V)-bitti vastaa 0,8 DAC-bittiä(0,00061035/V)
							  //Tässä tapauksessa DAC säädetään siten, että ADC näyttää nollaa(=ei extravaraa).
	do 
	{
		kalibrointiarvo = adc();
		_delay_ms(500);
		kalibrointiarvo2 = adc();
	} 
		while (kalibrointiarvo != kalibrointiarvo2);
}

void uart_init(void)
{	
	PORTC_OUTSET |= PIN3_bm;  //PC3=TXD0 
	PORTC_DIRSET |= PIN3_bm;
	USARTC0_BAUDCTRLA = 12;
	USARTC0_CTRLA = USART_DRIE_bm|USART_RXCINTLVL_LO_gc;
	USARTC0_CTRLC = USART_CHSIZE_8BIT_gc;
	USARTC0_CTRLB = USART_TXEN_bm|USART_RXEN_bm;
	
	/*USART initialization should use the following sequence:
	1. Set the TxD pin value high, and optionally set the XCK pin low.
	2. Set the TxD and optionally the XCK pin as output.
	3. Set the baud rate and frame format.
	4. Set the mode of operation (enables XCK pin output in synchronous mode).
	5. Enable the transmitter or the receiver, depending on the usage.
	For interrupt-driven USART operation, global interrupts should be disabled during the initialization.
	*/
}

void put_char(unsigned char merkki)
{
	loop_until_bit_is_set(USARTC0_STATUS, USART_DREIF_bp);
	USARTC0_DATA = merkki;
}

void put_int(int luku) 
{
	if (luku < 0)
	{
		put_char(0x2D);
		put_char(-luku/10000 + 48);
		put_char(-luku/1000 + luku/10000*10 + 48);
		put_char(-luku/100 + luku/1000*10 + 48);
		put_char(-luku/10 + luku/100*10 + 48);
		put_char(-luku + luku/10*10 + 48);
	}
	else
	{
		put_char(luku/10000 + 48);
		put_char(luku/1000 - luku/10000*10 + 48);
		put_char(luku/100 - luku/1000*10 + 48);
		put_char(luku/10 - luku/100*10 + 48);
		put_char(luku - luku/10*10 + 48);
	}

}

void  put_merkkijono(unsigned char merkkijono[])
{
	unsigned char i = 0;
	do
	{	put_char(merkkijono[i]);
		i++;
	} while (merkkijono[i] != 0);
}

int korkeus(void)
{
	/*
	z=RT/(gM)*ln(p0/(p0+dp*korjausarvo))
	M=22,41dm^3/mol*m/V
	Tarkkuus ei kuitenkaan riitä kuin noin 2000m asti 1V referenssillä, johon asti paine-korkeuskuvaaja on lähes lineaarinen.
	*/
	
	return (adc() - kalibrointiarvo)*muunnoskerroin*10;
}

void pwm_init()
{
	TCD5_CTRLB = TC45_WGMODE_FRQ_gc;
	TCD5_CTRLE = TC45_CCAMODE_COMP_gc;
	TCD5_CCA = 3; //~1kHz
	TCD5_CTRLA = TC45_CLKSEL_DIV256_gc;
		
	/*
	The compare channels can be used for waveform generation on the corresponding port pins. To make the waveform
	visible on the connected port pin, the following requirements must be fulfilled:
	1. A waveform generation mode must be selected.
	2. Event actions must be disabled.
	3. The CC channels used must be enabled. This will override the corresponding port pin output register.
	4. The direction for the associated port pin must be set to output.
	
	*/
}
void kello_init()
{
	OSC_CTRL   |= OSC_RC32KEN_bm;
	loop_until_bit_is_set(OSC_STATUS, OSC_RC32KRDY_bp);
	CLK_RTCCTRL = CLK_RTCSRC_RCOSC_gc|CLK_RTCEN_bm;
	RTC_PER		= (ajastin+3)*16; //sytytin päällä 3s
	RTC_COMP    = ajastin*16;
	RTC_INTCTRL = RTC_OVFINTLVL_LO_gc|RTC_COMPINTLVL_LO_gc;
}
	
	
	
void ledivilkku(char vilkku)
{	char i = 0;
	
	_delay_ms(1200);
	
	for (i = 0; i < vilkku; i++)
	{
		PORTD_OUTSET = punainen;
		_delay_ms(500);
		PORTD_OUTCLR = punainen;
		_delay_ms(300);
	}
	
	if (vilkku == 0)
	{
		PORTD_OUTSET = punainen;
		_delay_ms(100);
		PORTD_OUTCLR = punainen;
		_delay_ms(300);	
	}
}

void korkeusledi(int lakikorkeus, char vilkku)//näyttää korkeimman kokrkeuden yhtä lediä vilkuttaen 
{
	if (lakikorkeus > 1000)
	{
		vilkku = lakikorkeus/1000;
		ledivilkku(vilkku);
		
	}
	if (lakikorkeus > 100)
	{
		vilkku = lakikorkeus/100 - lakikorkeus/1000*10;
		ledivilkku(vilkku);
	}
	if (lakikorkeus > 10)
	{
		vilkku = lakikorkeus/10 - lakikorkeus/100*10;
		ledivilkku(vilkku);
	}
	if (lakikorkeus >= 0)
	{
		vilkku = lakikorkeus - lakikorkeus/10*10;
		ledivilkku(vilkku);
	}
	_delay_ms(3500);
}



ISR(USARTC0_RXC_vect)
{
	if (USARTC0_DATA == 0x6b)
	{
		unsigned int muistipaikka = 0;
		
		put_merkkijono("korkeus\n\r");
		for (muistipaikka = 0; muistipaikka <= 511; muistipaikka+=2)//luetaan joka 2. muistipaikasta (16 bit vie 2*8 bit tilaa)
		{
			put_int(eeprom_read_word(muistipaikka));
			put_merkkijono("\n\r");
		}
	}
	else if (USARTC0_DATA == 0x6e)
	{
		put_merkkijono("nananana");
	}
	else
	{
		PORTD_OUTTGL = punainen;
	}
}

ISR(RTC_COMP_vect)
{
	PORTD_OUTSET = sytytin|vihree;
}

ISR(RTC_OVF_vect)
{
	PORTD_OUT = vihree;
	RTC_CTRL = RTC_PRESCALER_OFF_gc; //kello pois
}

int main(void)
{
	init();
	adc_init();
	dac_init();
	korkeusmittari_init();
	uart_init();
	pwm_init();
	kello_init();
	
	unsigned int muistipaikka = 0;
	int korkeus1 = 0;
	int lakikorkeus = 0;
	char vilkku = 0;
	
	while (1)
	{
		put_int(korkeus());
		put_merkkijono("\n\r");
		_delay_ms(300);
		PORTD_OUTTGL = punainen;
	}
	
	
	PORTD_OUT = vihree|punainen;//valmius
	_delay_ms(100);
	
	loop_until_bit_is_set(PORTD_IN,PIN2_bp); //lähtö
	
	//RTC_CTRL  = RTC_PRESCALER_DIV64_gc; // kello käyntiin
	PORTD_OUT = punainen;
	
	
	for (muistipaikka = 0; muistipaikka <= 511; muistipaikka+=2)//tallennetaan joka 2. muistipaikkaan (16 bit vie 2*8 bit tilaa)
	{	
		korkeus1 = korkeus();
		
		eeprom_write_word(muistipaikka, korkeus1);
		
		if (korkeus1 > lakikorkeus)
		{
			lakikorkeus = korkeus1;
		}
		
		if ((lakikorkeus-10) > korkeus1 && korkeus1 <= 60 && (PORTD_OUT & vihree)== 0)
		{
			RTC_CTRL = RTC_PRESCALER_OFF_gc; // kello pois
			PORTD_OUTSET = sytytin|vihree;
			_delay_ms(3000);
			PORTD_OUT = vihree;
			muistipaikka += 12; //3s*4/s=12 paikkaa hyvätään yli
		}
		
		_delay_ms(230); //4Hz taajuus, muihin laskutoimituksiin menee noin 20ms(1ms tarkkuudella)
	}
	
	PORTD_OUTCLR = punainen;
	
	while(1)
	{
		korkeusledi(lakikorkeus,vilkku);
	}
}


	
